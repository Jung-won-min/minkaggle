{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:04.803327Z","iopub.execute_input":"2025-04-25T01:46:04.803477Z","iopub.status.idle":"2025-04-25T01:46:05.418675Z","shell.execute_reply.started":"2025-04-25T01:46:04.803459Z","shell.execute_reply":"2025-04-25T01:46:05.418028Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\ntest = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.419365Z","iopub.execute_input":"2025-04-25T01:46:05.419701Z","iopub.status.idle":"2025-04-25T01:46:05.478264Z","shell.execute_reply.started":"2025-04-25T01:46:05.419680Z","shell.execute_reply":"2025-04-25T01:46:05.477714Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.479703Z","iopub.execute_input":"2025-04-25T01:46:05.480176Z","iopub.status.idle":"2025-04-25T01:46:05.512767Z","shell.execute_reply.started":"2025-04-25T01:46:05.480160Z","shell.execute_reply":"2025-04-25T01:46:05.512156Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0     1461          20       RH         80.0    11622   Pave   NaN      Reg   \n1     1462          20       RL         81.0    14267   Pave   NaN      IR1   \n2     1463          60       RL         74.0    13830   Pave   NaN      IR1   \n3     1464          60       RL         78.0     9978   Pave   NaN      IR1   \n4     1465         120       RL         43.0     5005   Pave   NaN      IR1   \n...    ...         ...      ...          ...      ...    ...   ...      ...   \n1454  2915         160       RM         21.0     1936   Pave   NaN      Reg   \n1455  2916         160       RM         21.0     1894   Pave   NaN      Reg   \n1456  2917          20       RL        160.0    20000   Pave   NaN      Reg   \n1457  2918          85       RL         62.0    10441   Pave   NaN      Reg   \n1458  2919          60       RL         74.0     9627   Pave   NaN      Reg   \n\n     LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence  \\\n0            Lvl    AllPub  ...         120        0    NaN  MnPrv   \n1            Lvl    AllPub  ...           0        0    NaN    NaN   \n2            Lvl    AllPub  ...           0        0    NaN  MnPrv   \n3            Lvl    AllPub  ...           0        0    NaN    NaN   \n4            HLS    AllPub  ...         144        0    NaN    NaN   \n...          ...       ...  ...         ...      ...    ...    ...   \n1454         Lvl    AllPub  ...           0        0    NaN    NaN   \n1455         Lvl    AllPub  ...           0        0    NaN    NaN   \n1456         Lvl    AllPub  ...           0        0    NaN    NaN   \n1457         Lvl    AllPub  ...           0        0    NaN  MnPrv   \n1458         Lvl    AllPub  ...           0        0    NaN    NaN   \n\n     MiscFeature MiscVal MoSold  YrSold  SaleType  SaleCondition  \n0            NaN       0      6    2010        WD         Normal  \n1           Gar2   12500      6    2010        WD         Normal  \n2            NaN       0      3    2010        WD         Normal  \n3            NaN       0      6    2010        WD         Normal  \n4            NaN       0      1    2010        WD         Normal  \n...          ...     ...    ...     ...       ...            ...  \n1454         NaN       0      6    2006        WD         Normal  \n1455         NaN       0      4    2006        WD        Abnorml  \n1456         NaN       0      9    2006        WD        Abnorml  \n1457        Shed     700      7    2006        WD         Normal  \n1458         NaN       0     11    2006        WD         Normal  \n\n[1459 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>120</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Gar2</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>144</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1454</th>\n      <td>2915</td>\n      <td>160</td>\n      <td>RM</td>\n      <td>21.0</td>\n      <td>1936</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1455</th>\n      <td>2916</td>\n      <td>160</td>\n      <td>RM</td>\n      <td>21.0</td>\n      <td>1894</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n    </tr>\n    <tr>\n      <th>1456</th>\n      <td>2917</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>160.0</td>\n      <td>20000</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n    </tr>\n    <tr>\n      <th>1457</th>\n      <td>2918</td>\n      <td>85</td>\n      <td>RL</td>\n      <td>62.0</td>\n      <td>10441</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>Shed</td>\n      <td>700</td>\n      <td>7</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1458</th>\n      <td>2919</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>9627</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>11</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>1459 rows × 80 columns</p>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.513347Z","iopub.execute_input":"2025-04-25T01:46:05.513549Z","iopub.status.idle":"2025-04-25T01:46:05.527939Z","shell.execute_reply.started":"2025-04-25T01:46:05.513532Z","shell.execute_reply":"2025-04-25T01:46:05.527255Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n\n  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n\n  YrSold  SaleType  SaleCondition  SalePrice  \n0   2008        WD         Normal     208500  \n1   2007        WD         Normal     181500  \n2   2008        WD         Normal     223500  \n3   2006        WD        Abnorml     140000  \n4   2008        WD         Normal     250000  \n\n[5 rows x 81 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 81 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"cols = [\"LotFrontage\", \"LotArea\", \"GrLivArea\"]\nX_train = train[cols]\nY_train = train[\"SalePrice\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.528674Z","iopub.execute_input":"2025-04-25T01:46:05.528940Z","iopub.status.idle":"2025-04-25T01:46:05.545740Z","shell.execute_reply.started":"2025-04-25T01:46:05.528900Z","shell.execute_reply":"2025-04-25T01:46:05.545170Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"cols2 = [\"LotFrontage\", \"LotArea\", \"GrLivArea\"]\nX_test = test[cols2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.546318Z","iopub.execute_input":"2025-04-25T01:46:05.546482Z","iopub.status.idle":"2025-04-25T01:46:05.562332Z","shell.execute_reply.started":"2025-04-25T01:46:05.546467Z","shell.execute_reply":"2025-04-25T01:46:05.561486Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"Y_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.562992Z","iopub.execute_input":"2025-04-25T01:46:05.563243Z","iopub.status.idle":"2025-04-25T01:46:05.578925Z","shell.execute_reply.started":"2025-04-25T01:46:05.563201Z","shell.execute_reply":"2025-04-25T01:46:05.578407Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"0    208500\n1    181500\n2    223500\n3    140000\n4    250000\nName: SalePrice, dtype: int64"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.579328Z","iopub.execute_input":"2025-04-25T01:46:05.579475Z","iopub.status.idle":"2025-04-25T01:46:05.598017Z","shell.execute_reply.started":"2025-04-25T01:46:05.579459Z","shell.execute_reply":"2025-04-25T01:46:05.597453Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   LotFrontage  LotArea  GrLivArea\n0         65.0     8450       1710\n1         80.0     9600       1262\n2         68.0    11250       1786\n3         60.0     9550       1717\n4         84.0    14260       2198","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>GrLivArea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>1710</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>1262</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>1786</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>1717</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>2198</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:05.599457Z","iopub.execute_input":"2025-04-25T01:46:05.599620Z","iopub.status.idle":"2025-04-25T01:46:06.701560Z","shell.execute_reply.started":"2025-04-25T01:46:05.599604Z","shell.execute_reply":"2025-04-25T01:46:06.700886Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"#TODO: 학습하고 예측해보기\n#1)모델 학습하고\n#2)X_test 예측하고\n#3)sample_submission.csv만들어서 제출","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:06.702442Z","iopub.execute_input":"2025-04-25T01:46:06.702791Z","iopub.status.idle":"2025-04-25T01:46:06.706293Z","shell.execute_reply.started":"2025-04-25T01:46:06.702773Z","shell.execute_reply":"2025-04-25T01:46:06.705703Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"X_test","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:06.706834Z","iopub.execute_input":"2025-04-25T01:46:06.707429Z","iopub.status.idle":"2025-04-25T01:46:06.729889Z","shell.execute_reply.started":"2025-04-25T01:46:06.707413Z","shell.execute_reply":"2025-04-25T01:46:06.728741Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"      LotFrontage  LotArea  GrLivArea\n0            80.0    11622        896\n1            81.0    14267       1329\n2            74.0    13830       1629\n3            78.0     9978       1604\n4            43.0     5005       1280\n...           ...      ...        ...\n1454         21.0     1936       1092\n1455         21.0     1894       1092\n1456        160.0    20000       1224\n1457         62.0    10441        970\n1458         74.0     9627       2000\n\n[1459 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>GrLivArea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>896</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>1329</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>1629</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>1604</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>1280</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1454</th>\n      <td>21.0</td>\n      <td>1936</td>\n      <td>1092</td>\n    </tr>\n    <tr>\n      <th>1455</th>\n      <td>21.0</td>\n      <td>1894</td>\n      <td>1092</td>\n    </tr>\n    <tr>\n      <th>1456</th>\n      <td>160.0</td>\n      <td>20000</td>\n      <td>1224</td>\n    </tr>\n    <tr>\n      <th>1457</th>\n      <td>62.0</td>\n      <td>10441</td>\n      <td>970</td>\n    </tr>\n    <tr>\n      <th>1458</th>\n      <td>74.0</td>\n      <td>9627</td>\n      <td>2000</td>\n    </tr>\n  </tbody>\n</table>\n<p>1459 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"import numpy as np\n\n# X_train과 y_train 데이터 (예시)\nX_train = [\n    [65.0, 8450, 1710],\n    [80.0, 9600, 1262],\n    [68.0, 11250, 1786],\n    [60.0, 9550, 1717],\n    [84.0, 14260, 2198]\n]\ny_train = [208500, 181500, 223500, 140000, 250000]\n\n# X_test 데이터 (1459개의 샘플과 3개의 특성)\n# 여기서는 예시로 임의의 데이터를 생성하지만, 실제 데이터를 사용해야 합니다.\nX_test = np.random.rand(1459, 3) * 10000  # 1459개의 샘플과 3개의 특성으로 임의 데이터 생성\n\n# LinearRegression 클래스 정의\nclass LinearRegression:\n    def __init__(self, lr=0.00000001, epochs=1000):\n        self.lr = lr\n        self.epochs = epochs\n        self.weights = None\n        self.bias = 0\n\n    def fit(self, X, y):\n        X = np.array(X)\n        y = np.array(y)\n        \n        # 데이터 차원에 맞게 가중치 초기화\n        n_samples, n_features = X.shape\n        self.weights = np.zeros(n_features)\n        self.bias = 0\n\n        # 경사 하강법\n        for _ in range(self.epochs):\n            y_pred = np.dot(X, self.weights) + self.bias  # 예측값 계산\n            error = y_pred - y\n\n            # 경사 하강법 업데이트\n            self.weights -= self.lr * (1 / n_samples) * np.dot(X.T, error)\n            self.bias -= self.lr * (1 / n_samples) * np.sum(error)\n\n    def predict(self, X):\n        X = np.array(X)\n        return np.dot(X, self.weights) + self.bias\n\n# LinearRegression 모델 객체 생성\nmodel = LinearRegression()\n\n# 모델 학습\nmodel.fit(X_train, y_train)\n\n# X_test에 대해 예측\ny_pred = model.predict(X_test)\n\n# 예측 결과 출력 (예시로 첫 5개의 예측 결과만 출력)\nprint(\"첫 5개의 예측값:\")\nprint(y_pred[:5])\n\n# 예측된 값의 갯수 확인 (X_test의 샘플 수와 동일해야 함)\nprint(f\"예측된 값의 갯수: {len(y_pred)}\")\n\nsubmission = pd.DataFrame({\n    \"Id\": range(1, len(y_pred) + 1),  # Id는 1부터 시작\n    \"SalePrice\": y_pred  # 예측값\n})\n\n# CSV 파일로 저장\nsubmission.to_csv(\"/kaggle/working/sample_submission2.csv\", index=False)\n\nprint(\"sample_submission2.csv 파일이 성공적으로 저장되었습니다!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T01:46:06.730668Z","iopub.execute_input":"2025-04-25T01:46:06.730864Z","iopub.status.idle":"2025-04-25T01:46:06.776370Z","shell.execute_reply.started":"2025-04-25T01:46:06.730847Z","shell.execute_reply":"2025-04-25T01:46:06.775719Z"}},"outputs":[{"name":"stdout","text":"첫 5개의 예측값:\n[262619.2322336  325426.60282094 103719.59311644 230254.61430478\n 204912.35829213]\n예측된 값의 갯수: 1459\nsample_submission2.csv 파일이 성공적으로 저장되었습니다!\n","output_type":"stream"}],"execution_count":12}]}